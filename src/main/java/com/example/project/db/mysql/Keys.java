/**
 * This class is generated by jOOQ
 */
package com.example.project.db.mysql;


import com.example.project.db.mysql.tables.Author;
import com.example.project.db.mysql.tables.Book;
import com.example.project.db.mysql.tables.BookStore;
import com.example.project.db.mysql.tables.BookToBookStore;
import com.example.project.db.mysql.tables.User;
import com.example.project.db.mysql.tables.records.AuthorRecord;
import com.example.project.db.mysql.tables.records.BookRecord;
import com.example.project.db.mysql.tables.records.BookStoreRecord;
import com.example.project.db.mysql.tables.records.BookToBookStoreRecord;
import com.example.project.db.mysql.tables.records.UserRecord;

import javax.annotation.Generated;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;


/**
 * A class modelling foreign key relationships between tables of the <code>aber</code> 
 * schema
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

	// -------------------------------------------------------------------------
	// IDENTITY definitions
	// -------------------------------------------------------------------------

	public static final Identity<UserRecord, Integer> IDENTITY_USER = Identities0.IDENTITY_USER;

	// -------------------------------------------------------------------------
	// UNIQUE and PRIMARY KEY definitions
	// -------------------------------------------------------------------------

	public static final UniqueKey<AuthorRecord> KEY_AUTHOR_PRIMARY = UniqueKeys0.KEY_AUTHOR_PRIMARY;
	public static final UniqueKey<BookRecord> KEY_BOOK_PRIMARY = UniqueKeys0.KEY_BOOK_PRIMARY;
	public static final UniqueKey<BookStoreRecord> KEY_BOOK_STORE_PRIMARY = UniqueKeys0.KEY_BOOK_STORE_PRIMARY;
	public static final UniqueKey<BookToBookStoreRecord> KEY_BOOK_TO_BOOK_STORE_PRIMARY = UniqueKeys0.KEY_BOOK_TO_BOOK_STORE_PRIMARY;
	public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = UniqueKeys0.KEY_USER_PRIMARY;

	// -------------------------------------------------------------------------
	// FOREIGN KEY definitions
	// -------------------------------------------------------------------------

	public static final ForeignKey<BookRecord, AuthorRecord> FK_T_BOOK_AUTHOR_ID = ForeignKeys0.FK_T_BOOK_AUTHOR_ID;
	public static final ForeignKey<BookRecord, AuthorRecord> FK_T_BOOK_CO_AUTHOR_ID = ForeignKeys0.FK_T_BOOK_CO_AUTHOR_ID;
	public static final ForeignKey<BookToBookStoreRecord, BookStoreRecord> FK_B2BS_BS_NAME = ForeignKeys0.FK_B2BS_BS_NAME;
	public static final ForeignKey<BookToBookStoreRecord, BookRecord> FK_B2BS_B_ID = ForeignKeys0.FK_B2BS_B_ID;

	// -------------------------------------------------------------------------
	// [#1459] distribute members to avoid static initialisers > 64kb
	// -------------------------------------------------------------------------

	private static class Identities0 extends AbstractKeys {
		public static Identity<UserRecord, Integer> IDENTITY_USER = createIdentity(User.USER, User.ID);
	}

	private static class UniqueKeys0 extends AbstractKeys {
		public static final UniqueKey<AuthorRecord> KEY_AUTHOR_PRIMARY = createUniqueKey(Author.AUTHOR, Author.ID);
		public static final UniqueKey<BookRecord> KEY_BOOK_PRIMARY = createUniqueKey(Book.BOOK, Book.ID);
		public static final UniqueKey<BookStoreRecord> KEY_BOOK_STORE_PRIMARY = createUniqueKey(BookStore.BOOK_STORE, BookStore.NAME);
		public static final UniqueKey<BookToBookStoreRecord> KEY_BOOK_TO_BOOK_STORE_PRIMARY = createUniqueKey(BookToBookStore.BOOK_TO_BOOK_STORE, BookToBookStore.BOOK_STORE_NAME, BookToBookStore.BOOK_ID);
		public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = createUniqueKey(User.USER, User.ID);
	}

	private static class ForeignKeys0 extends AbstractKeys {
		public static final ForeignKey<BookRecord, AuthorRecord> FK_T_BOOK_AUTHOR_ID = createForeignKey(com.example.project.db.mysql.Keys.KEY_AUTHOR_PRIMARY, Book.BOOK, Book.AUTHOR_ID);
		public static final ForeignKey<BookRecord, AuthorRecord> FK_T_BOOK_CO_AUTHOR_ID = createForeignKey(com.example.project.db.mysql.Keys.KEY_AUTHOR_PRIMARY, Book.BOOK, Book.CO_AUTHOR_ID);
		public static final ForeignKey<BookToBookStoreRecord, BookStoreRecord> FK_B2BS_BS_NAME = createForeignKey(com.example.project.db.mysql.Keys.KEY_BOOK_STORE_PRIMARY, BookToBookStore.BOOK_TO_BOOK_STORE, BookToBookStore.BOOK_STORE_NAME);
		public static final ForeignKey<BookToBookStoreRecord, BookRecord> FK_B2BS_B_ID = createForeignKey(com.example.project.db.mysql.Keys.KEY_BOOK_PRIMARY, BookToBookStore.BOOK_TO_BOOK_STORE, BookToBookStore.BOOK_ID);
	}
}
